{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is the secure API for the agreement bot.",
    "title": "Agreement Bot Secure API",
    "version": "0.0.1"
  },
  "host": "localhost",
  "paths": {
    "/deploycheck/deploycompatible": {
      "get": {
        "description": "This API does compatibility check for the given deployment policy (or a pattern), service definition, node policy and node user input. It does both policy compatibility check and user input compatibility check. If the result is compatible, it means that, when deployed, the node will form an agreement with the agbot and the service will be running on the node.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Check deployment compatibility.",
        "operationId": "deploy_compatible",
        "parameters": [
          {
            "type": "boolean",
            "description": "Return the compatibility check result for all the service versions referenced in the deployment policy or pattern.",
            "name": "checkAll",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Show the input which was used to come up with the result.",
            "name": "long",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The exchange id of the node. Mutually exclusive with node_policy and node_user_input.",
            "name": "node_id",
            "in": "body"
          },
          {
            "type": "string",
            "description": "The architecture of the node.",
            "name": "node_arch",
            "in": "body"
          },
          {
            "type": "string",
            "description": "The type of the node. It can be device or cluster. The default is device. It can be omitted if node_id is specified.",
            "name": "node_type",
            "in": "body"
          },
          {
            "type": "string",
            "description": "The kubernetes namespace for the node with cluster type. The default namespace is openhorizon-agent. It can be omitted if node_id is specified or the node_type is device.",
            "name": "node_cluster_namespace",
            "in": "body"
          },
          {
            "description": "The node policy that will be put in the exchange. Mutually exclusive with node_id.",
            "name": "node_policy",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ExternalPolicy"
            }
          },
          {
            "description": "The user input that will be put in the exchange for the services. Mutually exclusive with node_id.",
            "name": "node_user_input",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserInput"
            }
          },
          {
            "type": "string",
            "description": "The exchange id of the deployment policy. Mutually exclusive with business_policy. Mutually exclusive with pattern_id and pattern.",
            "name": "business_policy_id",
            "in": "body"
          },
          {
            "description": "The defintion of the deployment policy that will be put in the exchange. Mutually exclusive with business_policy_id. Mutually exclusive with pattern_id and pattern.",
            "name": "business_policy",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/BusinessPolicy"
            }
          },
          {
            "type": "string",
            "description": "The exchange id of the pattern. Mutually exclusive with pattern. Mutually exclusive with business_policy_id and business_policy.",
            "name": "pattern_id",
            "in": "body"
          },
          {
            "description": "The pattern that will be put in the exchange. Mutually exclusive with pattern_id. Mutually exclusive with business_policy_id and business_policy.",
            "name": "pattern",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PatternFile"
            }
          },
          {
            "description": "The service policy that will be put in the exchange. They are for the top level service referenced in the deployment policy. If omitted, the service policy will be retrieved from the exchange. The service policy has the same format as the node policy.",
            "name": "service_policy",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ExternalPolicy"
            }
          },
          {
            "description": "An array of the top level services that will be put in the exchange. They are refrenced in the deployment policy or pattern. If omitted, the services will be retrieved from the exchange.",
            "name": "service",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ServiceFile"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "compcheck.CompCheckOutput",
              "$ref": "#/definitions/CompCheckOutput"
            }
          },
          "400": {
            "description": "Failure - No input found",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Failure - Failed to authenticate",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Failure - Error",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/deploycheck/policycompatible": {
      "get": {
        "description": "This API does the policy compatibility check for the given deployment policy, node policy and service policy. The deployment policy and the service policy will be merged to check against the node policy. If the result is compatible, it means that, when deployed, the node will form an agreement with the agbot and the service will be running on the node.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Check the policy compatibility",
        "operationId": "deployCheckPolicyCompatible",
        "parameters": [
          {
            "type": "boolean",
            "description": "Return the compatibility check result for all the service versions referenced in the deployment policy or pattern.",
            "name": "checkAll",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Show the input which was used to come up with the result.",
            "name": "long",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The exchange id of the node. Mutually exclusive with node_policy.",
            "name": "node_id",
            "in": "body"
          },
          {
            "type": "string",
            "description": "The architecture of the node.",
            "name": "node_arch",
            "in": "body"
          },
          {
            "type": "string",
            "description": "The type of the node. It can be device or cluster. The default is device. It can be omitted if node_id is specified.",
            "name": "node_type",
            "in": "body"
          },
          {
            "type": "string",
            "description": "The kubernetes namespace for the node with cluster type. The default namespace is openhorizon-agent. It can be omitted if node_id is specified or the node_type is device.",
            "name": "node_cluster_namespace",
            "in": "body"
          },
          {
            "description": "The node policy that will be put in the exchange. Mutually exclusive with node_id.",
            "name": "node_policy",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ExternalPolicy"
            }
          },
          {
            "type": "string",
            "description": "The exchange id of the deployment policy. Mutually exclusive with business_policy.",
            "name": "business_policy_id",
            "in": "body"
          },
          {
            "description": "The defintion of the deployment policy that will be put in the exchange. Mutually exclusive with business_policy_id.",
            "name": "business_policy",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/BusinessPolicy"
            }
          },
          {
            "description": "The service policy that will be put in the exchange. They are for the top level service referenced in the deployment policy. If omitted, the service policy will be retrieved from the exchange. The service policy has the same format as the node policy.",
            "name": "service_policy",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ExternalPolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CompCheckOutput"
            }
          },
          "400": {
            "description": "Failure - No input found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Failure - Error",
            "schema": {
              "type": "string"
            }
          },
          "501": {
            "description": "Failure - Failed to authenticate",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/deploycheck/secretbindingcompatible": {
      "get": {
        "description": "This API does the secret binding compatibility check for the given deployment policy (or a pattern) and service definition. It checks if each secret defined in a serice has a binding associated in the given deployment policy (or pattern) and each bound secret exists in the secret manager. If the result is compatible, it means that, when deployed, the node will form an agreement with the agbot and the service will be running on the node.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Check the secret binding compatibility.",
        "operationId": "secretbinding_compatible",
        "parameters": [
          {
            "type": "boolean",
            "description": "Return the compatibility check result for all the service versions referenced in the deployment policy or pattern.",
            "name": "checkAll",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Show the input which was used to come up with the result.",
            "name": "long",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The exchange id of the node. Mutually exclusive with node_user_input.",
            "name": "node_id",
            "in": "body"
          },
          {
            "type": "string",
            "description": "The architecture of the node.",
            "name": "node_arch",
            "in": "body"
          },
          {
            "type": "string",
            "description": "The organization of the node.",
            "name": "node_org",
            "in": "body"
          },
          {
            "type": "string",
            "description": "The exchange id of the deployment policy. Mutually exclusive with business_policy. Mutually exclusive with pattern_id and pattern.",
            "name": "business_policy_id",
            "in": "body"
          },
          {
            "description": "The defintion of the deployment policy that will be put in the exchange. Mutually exclusive with business_policy_id. Mutually exclusive with pattern_id and pattern.",
            "name": "business_policy",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/BusinessPolicy"
            }
          },
          {
            "type": "string",
            "description": "The exchange id of the pattern. Mutually exclusive with pattern. Mutually exclusive with business_policy_id and business_policy.",
            "name": "pattern_id",
            "in": "body"
          },
          {
            "description": "The pattern that will be put in the exchange. Mutually exclusive with pattern_id. Mutually exclusive with business_policy_id and business_policy.",
            "name": "pattern",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PatternFile"
            }
          },
          {
            "description": "An array of the top level services that will be put in the exchange. They are refrenced in the deployment policy or pattern. If omitted, the services will be retrieved from the exchange.",
            "name": "service",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ServiceFile"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "compcheck.CompCheckOutput",
              "$ref": "#/definitions/CompCheckOutput"
            }
          },
          "400": {
            "description": "Failure - No input found",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Failure - Failed to authenticate",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Failure - Error",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/deploycheck/userinputcompatible": {
      "get": {
        "description": "This API does the user input compatibility check for the given deployment policy (or a pattern), service definition and node user input. The user input values in the deployment policy and the node will be merged to check against the service uer input requirement defined in the service definition. If the result is compatible, it means that, when deployed, the node will form an agreement with the agbot and the service will be running on the node.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Check the user input compatibility.",
        "operationId": "userinputCompatible",
        "parameters": [
          {
            "type": "boolean",
            "description": "Return the compatibility check result for all the service versions referenced in the deployment policy or pattern.",
            "name": "checkAll",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Show the input which was used to come up with the result.",
            "name": "long",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The exchange id of the node. Mutually exclusive with node_user_input.",
            "name": "node_id",
            "in": "body"
          },
          {
            "type": "string",
            "description": "The architecture of the node.",
            "name": "node_arch",
            "in": "body"
          },
          {
            "type": "string",
            "description": "The type of the node. It can be device or cluster. The default is device. It can be omitted if node_id is specified.",
            "name": "node_type",
            "in": "body"
          },
          {
            "type": "string",
            "description": "The kubernetes namespace for the node with cluster type. The default namespace is openhorizon-agent. It can be omitted if node_id is specified.",
            "name": "node_cluster_namespace",
            "in": "body"
          },
          {
            "description": "The user input that will be put in the exchange for the services. Mutually exclusive with node_id.",
            "name": "node_user_input",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserInput"
            }
          },
          {
            "type": "string",
            "description": "The exchange id of the deployment policy. Mutually exclusive with business_policy. Mutually exclusive with pattern_id and pattern.",
            "name": "business_policy_id",
            "in": "body"
          },
          {
            "description": "The defintion of the deployment policy that will be put in the exchange. Mutually exclusive with business_policy_id. Mutually exclusive with pattern_id and pattern.",
            "name": "business_policy",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/BusinessPolicy"
            }
          },
          {
            "type": "string",
            "description": "The exchange id of the pattern. Mutually exclusive with pattern. Mutually exclusive with business_policy_id and business_policy.",
            "name": "pattern_id",
            "in": "body"
          },
          {
            "description": "The pattern that will be put in the exchange. Mutually exclusive with pattern_id. Mutually exclusive with business_policy_id and business_policy.",
            "name": "pattern",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PatternFile"
            }
          },
          {
            "description": "An array of the top level services that will be put in the exchange. They are refrenced in the deployment policy or pattern. If omitted, the services will be retrieved from the exchange.",
            "name": "service",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ServiceFile"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "compcheck.CompCheckOutput",
              "$ref": "#/definitions/CompCheckOutput"
            }
          },
          "400": {
            "description": "Failure - No input found",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Failure - Failed to authenticate",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Failure - Error",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/org/{org}/allsecrets": {},
    "/org/{org}/secrets": {},
    "/org/{org}/secrets/*": {
      "get": {
        "description": "Authenticates the node user with the exchange. Checks if the vault plugin being used is ready.\nPerforms sanity checks on the secret user and secret name provided.",
        "consumes": [
          "application/json"
        ],
        "summary": "Common setup required before using the vault to manage secrets.",
        "operationId": "secrets_setup",
        "parameters": [
          {
            "type": "string",
            "description": "The organisation name the secret belongs to. Must be the same as the org the user node belongs to.",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The user owning the secret.",
            "name": "user",
            "in": "path"
          },
          {
            "type": "string",
            "description": "The node the secret is for.",
            "name": "node",
            "in": "path"
          },
          {
            "type": "string",
            "description": "The secret key (name).",
            "name": "secret",
            "in": "path"
          }
        ],
        "responses": {
          "400": {
            "description": "Secret org or name does not meet constraints.",
            "schema": {
              "type": "string"
            }
          },
          "503": {
            "description": "Secret provider not ready or not configured.",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/org/{org}/secrets/node/{node}/{secret}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "List given secret belonging to the org for a node.",
        "operationId": "nodeOrgSecretGet",
        "parameters": [
          {
            "type": "string",
            "description": "The organisation name the secret belongs to. Must be the same as the org the user node belongs to.",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The node the secret is for.",
            "name": "node",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The secret key (name).",
            "name": "secret",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/definitions/SecretDetails"
          },
          "401": {
            "description": "Unauthenticated user."
          },
          "403": {
            "description": "Secrets permission denied to user."
          },
          "404": {
            "description": "Secret does not exist."
          },
          "500": {
            "description": "Invalid vault response"
          },
          "503": {
            "description": "Secret provider unavailable"
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Add a given secret belonging to the org for a node.",
        "operationId": "nodeOrgSecretPost",
        "parameters": [
          {
            "type": "string",
            "description": "The organisation name the secret belongs to. Must be the same as the org the user node belongs to.",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The node the secret is for.",
            "name": "node",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The secret key (name).",
            "name": "secret",
            "in": "path",
            "required": true
          },
          {
            "description": "The secret key and value.",
            "name": "secretDetails",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SecretDetails"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success."
          },
          "401": {
            "description": "Unauthenticated user."
          },
          "403": {
            "description": "Secrets permission denied to user."
          },
          "404": {
            "description": "Secret does not exist."
          },
          "500": {
            "description": "Invalid vault response"
          },
          "503": {
            "description": "Secret provider unavailable"
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete a given secret belonging to the org for a node.",
        "operationId": "nodeOrgSecretDelete",
        "parameters": [
          {
            "type": "string",
            "description": "The organisation name the secret belongs to. Must be the same as the org the user node belongs to.",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The node the secret is for.",
            "name": "node",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The secret key (name).",
            "name": "secret",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success."
          },
          "401": {
            "description": "Unauthenticated user."
          },
          "403": {
            "description": "Secrets permission denied to user."
          },
          "404": {
            "description": "Secret does not exist."
          },
          "500": {
            "description": "Invalid vault response"
          },
          "503": {
            "description": "Secret provider unavailable"
          }
        }
      }
    },
    "/org/{org}/secrets/user/{user}/node/{node}/{secret}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "List given secret belonging to the user for a node.",
        "operationId": "nodeUserSecretGet",
        "parameters": [
          {
            "type": "string",
            "description": "The organisation name the secret belongs to. Must be the same as the org the user node belongs to.",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The user owning the secret.",
            "name": "user",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The node the secret is for.",
            "name": "node",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The secret key (name).",
            "name": "secret",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/definitions/SecretDetails"
          },
          "401": {
            "description": "Unauthenticated user."
          },
          "403": {
            "description": "Secrets permission denied to user."
          },
          "404": {
            "description": "Secret does not exist."
          },
          "500": {
            "description": "Invalid vault response"
          },
          "503": {
            "description": "Secret provider unavailable"
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Add a given secret belonging to the user for a node.",
        "operationId": "userSecret",
        "parameters": [
          {
            "description": "The secret key and value.",
            "name": "secretDetails",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SecretDetails"
            }
          },
          {
            "type": "string",
            "description": "The organisation name the secret belongs to. Must be the same as the org the user node belongs to.",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The user owning the secret.",
            "name": "user",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The node the secret is for.",
            "name": "node",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The secret key (name).",
            "name": "secret",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success."
          },
          "401": {
            "description": "Unauthenticated user."
          },
          "403": {
            "description": "Secrets permission denied to user."
          },
          "404": {
            "description": "Secret does not exist."
          },
          "500": {
            "description": "Invalid vault response"
          },
          "503": {
            "description": "Secret provider unavailable"
          }
        }
      }
    },
    "/org/{org}/secrets/user/{user}/{secret}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "List given secret belonging to the user.",
        "operationId": "userSecretGet",
        "parameters": [
          {
            "type": "string",
            "description": "The organisation name the secret belongs to.",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The user owning the secret.",
            "name": "user",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The secret key (name).",
            "name": "secret",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/definitions/SecretDetails"
          },
          "401": {
            "description": "Unauthenticated user."
          },
          "403": {
            "description": "Secrets permission denied to user."
          },
          "404": {
            "description": "Secret does not exist."
          },
          "500": {
            "description": "Invalid vault response"
          },
          "503": {
            "description": "Secret provider unavailable"
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Add a given secret belonging to the user.",
        "operationId": "userSecretPost",
        "parameters": [
          {
            "description": "The secret key and value.",
            "name": "secretDetails",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SecretDetails"
            }
          },
          {
            "type": "string",
            "description": "The organisation name the secret belongs to.",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The user owning the secret.",
            "name": "user",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The secret key (name).",
            "name": "secret",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success."
          },
          "401": {
            "description": "Unauthenticated user."
          },
          "403": {
            "description": "Secrets permission denied to user."
          },
          "404": {
            "description": "Secret does not exist."
          },
          "500": {
            "description": "Invalid vault response"
          },
          "503": {
            "description": "Secret provider unavailable"
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete a given secret belonging to the user.",
        "operationId": "nodeUserSecretDelete",
        "parameters": [
          {
            "type": "string",
            "description": "The organisation name the secret belongs to. Must be the same as the org the user node belongs to.",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The user owning the secret.",
            "name": "user",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The secret key (name).",
            "name": "secret",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success."
          },
          "401": {
            "description": "Unauthenticated user."
          },
          "403": {
            "description": "Secrets permission denied to user."
          },
          "404": {
            "description": "Secret does not exist."
          },
          "500": {
            "description": "Invalid vault response"
          },
          "503": {
            "description": "Secret provider unavailable"
          }
        }
      }
    },
    "/org/{org}/secrets/{secret}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "List given secret belonging to the org.",
        "operationId": "orgSecretGet",
        "parameters": [
          {
            "type": "string",
            "description": "The organisation name the secret belongs to.",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The secret key (name).",
            "name": "secret",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/definitions/SecretDetails"
          },
          "401": {
            "description": "Unauthenticated user."
          },
          "403": {
            "description": "Secrets permission denied to user."
          },
          "404": {
            "description": "Secret does not exist."
          },
          "500": {
            "description": "Invalid vault response"
          },
          "503": {
            "description": "Secret provider unavailable"
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Add a given secret belonging to the org.",
        "operationId": "orgSecretPut",
        "parameters": [
          {
            "description": "The secret key and value.",
            "name": "secretDetails",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SecretDetails"
            }
          },
          {
            "type": "string",
            "description": "The organisation name the secret belongs to.",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The secret key (name).",
            "name": "secret",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success."
          },
          "401": {
            "description": "Unauthenticated user."
          },
          "403": {
            "description": "Secrets permission denied to user."
          },
          "404": {
            "description": "Secret does not exist."
          },
          "500": {
            "description": "Invalid vault response"
          },
          "503": {
            "description": "Secret provider unavailable"
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete a given secret belonging to the org.",
        "operationId": "orgSecretDelete",
        "parameters": [
          {
            "type": "string",
            "description": "The organisation name the secret belongs to.",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The secret key (name).",
            "name": "secret",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success."
          },
          "401": {
            "description": "Unauthenticated user."
          },
          "403": {
            "description": "Secrets permission denied to user."
          },
          "404": {
            "description": "Secret does not exist."
          },
          "500": {
            "description": "Invalid vault response"
          },
          "503": {
            "description": "Secret provider unavailable"
          }
        }
      }
    }
  },
  "definitions": {
    "SecretDetails": {
      "description": "SecretDetails The key value pair of one secret",
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "x-go-name": "Key"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/agreementbot/secrets"
    }
  }
}