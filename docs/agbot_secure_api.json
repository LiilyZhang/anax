{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is the secure API for the agreement bot.",
    "title": "Agreement Bot Secure API",
    "version": "0.0.1"
  },
  "host": "localhost",
  "basePath": "/",
  "paths": {
    "/deploycheck/deploycompatible": {
      "get": {
        "description": "This API does compatibility check for the given deployment policy (or a pattern), service definition, node policy and node user input. It does both policy compatibility check and user input compatibility check. If the result is compatible, it means that, when deployed, the node will form an agreement with the agbot and the service will be running on the node.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Check deployment compatibility.",
        "operationId": "deploy_compatible",
        "parameters": [
          {
            "type": "boolean",
            "description": "Return the compatibility check result for all the service versions referenced in the deployment policy or pattern.",
            "name": "checkAll",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Show the input which was used to come up with the result.",
            "name": "long",
            "in": "query"
          },
          {
            "description": "The compCheck object as payload.",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompCheck"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/CompCheckOutput"
            }
          },
          "400": {
            "description": "Failure - No input found",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Failure - Failed to authenticate",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Failure - Error",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/deploycheck/policycompatible": {
      "get": {
        "description": "This API does the policy compatibility check for the given deployment policy, node policy and service policy. The deployment policy and the service policy will be merged to check against the node policy. If the result is compatible, it means that, when deployed, the node will form an agreement with the agbot and the service will be running on the node.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Check the policy compatibility",
        "operationId": "deployCheckPolicyCompatible",
        "parameters": [
          {
            "type": "boolean",
            "description": "Return the compatibility check result for all the service versions referenced in the deployment policy or pattern.",
            "name": "checkAll",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Show the input which was used to come up with the result.",
            "name": "long",
            "in": "query"
          },
          {
            "description": "The policy payload to check.",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PolicyCheck"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/CompCheckOutput"
            }
          },
          "400": {
            "description": "Failure - No input found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Failure - Error",
            "schema": {
              "type": "string"
            }
          },
          "501": {
            "description": "Failure - Failed to authenticate",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/deploycheck/secretbindingcompatible": {
      "get": {
        "description": "This API does the secret binding compatibility check for the given deployment policy (or a pattern) and service definition. It checks if each secret defined in a serice has a binding associated in the given deployment policy (or pattern) and each bound secret exists in the secret manager. If the result is compatible, it means that, when deployed, the node will form an agreement with the agbot and the service will be running on the node.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Check the secret binding compatibility.",
        "operationId": "secretbinding_compatible",
        "parameters": [
          {
            "type": "boolean",
            "description": "Return the compatibility check result for all the service versions referenced in the deployment policy or pattern.",
            "name": "checkAll",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Show the input which was used to come up with the result.",
            "name": "long",
            "in": "query"
          },
          {
            "description": "The payload of the secret binding.",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SecretBindingCheck"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/CompCheckOutput"
            }
          },
          "400": {
            "description": "Failure - No input found",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Failure - Failed to authenticate",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Failure - Error",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/deploycheck/userinputcompatible": {
      "get": {
        "description": "This API does the user input compatibility check for the given deployment policy (or a pattern), service definition and node user input. The user input values in the deployment policy and the node will be merged to check against the service uer input requirement defined in the service definition. If the result is compatible, it means that, when deployed, the node will form an agreement with the agbot and the service will be running on the node.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Check the user input compatibility.",
        "operationId": "userinputCompatible",
        "parameters": [
          {
            "type": "boolean",
            "description": "Return the compatibility check result for all the service versions referenced in the deployment policy or pattern.",
            "name": "checkAll",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Show the input which was used to come up with the result.",
            "name": "long",
            "in": "query"
          },
          {
            "description": "The user input payload whose compatibility you want to check.",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserInputCheck"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/CompCheckOutput"
            }
          },
          "400": {
            "description": "Failure - No input found",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Failure - Failed to authenticate",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Failure - Error",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/org/{org}/secrets/node/{node}/{secret}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "List given secret belonging to the org for a node.",
        "operationId": "nodeOrgSecretGet",
        "parameters": [
          {
            "type": "string",
            "description": "The organisation name the secret belongs to. Must be the same as the org the user node belongs to.",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The node the secret is for.",
            "name": "node",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The secret key (name).",
            "name": "secret",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/SecretDetails"
            }
          },
          "401": {
            "description": "Unauthenticated user."
          },
          "403": {
            "description": "Secrets permission denied to user."
          },
          "404": {
            "description": "Secret does not exist."
          },
          "500": {
            "description": "Invalid vault response"
          },
          "503": {
            "description": "Secret provider unavailable"
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Add a given secret belonging to the org for a node.",
        "operationId": "nodeOrgSecretPost",
        "parameters": [
          {
            "type": "string",
            "description": "The organisation name the secret belongs to. Must be the same as the org the user node belongs to.",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The node the secret is for.",
            "name": "node",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The secret key (name).",
            "name": "secret",
            "in": "path",
            "required": true
          },
          {
            "description": "The secret key and value.",
            "name": "secretDetails",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SecretDetails"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "401": {
            "description": "Unauthenticated user."
          },
          "403": {
            "description": "Secrets permission denied to user."
          },
          "404": {
            "description": "Secret does not exist."
          },
          "500": {
            "description": "Invalid vault response"
          },
          "503": {
            "description": "Secret provider unavailable"
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete a given secret belonging to the org for a node.",
        "operationId": "nodeOrgSecretDelete",
        "parameters": [
          {
            "type": "string",
            "description": "The organisation name the secret belongs to. Must be the same as the org the user node belongs to.",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The node the secret is for.",
            "name": "node",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The secret key (name).",
            "name": "secret",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "401": {
            "description": "Unauthenticated user."
          },
          "403": {
            "description": "Secrets permission denied to user."
          },
          "404": {
            "description": "Secret does not exist."
          },
          "500": {
            "description": "Invalid vault response"
          },
          "503": {
            "description": "Secret provider unavailable"
          }
        }
      }
    },
    "/org/{org}/secrets/user/{user}/node/{node}/{secret}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "List given secret belonging to the user for a node.",
        "operationId": "nodeUserSecretGet",
        "parameters": [
          {
            "type": "string",
            "description": "The organisation name the secret belongs to. Must be the same as the org the user node belongs to.",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The user owning the secret.",
            "name": "user",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The node the secret is for.",
            "name": "node",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The secret key (name).",
            "name": "secret",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/SecretDetails"
            }
          },
          "401": {
            "description": "Unauthenticated user."
          },
          "403": {
            "description": "Secrets permission denied to user."
          },
          "404": {
            "description": "Secret does not exist."
          },
          "500": {
            "description": "Invalid vault response"
          },
          "503": {
            "description": "Secret provider unavailable"
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Add a given secret belonging to the user for a node.",
        "operationId": "userSecret",
        "parameters": [
          {
            "description": "The secret key and value.",
            "name": "secretDetails",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SecretDetails"
            }
          },
          {
            "type": "string",
            "description": "The organisation name the secret belongs to. Must be the same as the org the user node belongs to.",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The user owning the secret.",
            "name": "user",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The node the secret is for.",
            "name": "node",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The secret key (name).",
            "name": "secret",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "401": {
            "description": "Unauthenticated user."
          },
          "403": {
            "description": "Secrets permission denied to user."
          },
          "404": {
            "description": "Secret does not exist."
          },
          "500": {
            "description": "Invalid vault response"
          },
          "503": {
            "description": "Secret provider unavailable"
          }
        }
      }
    },
    "/org/{org}/secrets/user/{user}/{secret}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "List given secret belonging to the user.",
        "operationId": "userSecretGet",
        "parameters": [
          {
            "type": "string",
            "description": "The organisation name the secret belongs to.",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The user owning the secret.",
            "name": "user",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The secret key (name).",
            "name": "secret",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/SecretDetails"
            }
          },
          "401": {
            "description": "Unauthenticated user."
          },
          "403": {
            "description": "Secrets permission denied to user."
          },
          "404": {
            "description": "Secret does not exist."
          },
          "500": {
            "description": "Invalid vault response"
          },
          "503": {
            "description": "Secret provider unavailable"
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Add a given secret belonging to the user.",
        "operationId": "userSecretPost",
        "parameters": [
          {
            "description": "The secret key and value.",
            "name": "secretDetails",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SecretDetails"
            }
          },
          {
            "type": "string",
            "description": "The organisation name the secret belongs to.",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The user owning the secret.",
            "name": "user",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The secret key (name).",
            "name": "secret",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "401": {
            "description": "Unauthenticated user."
          },
          "403": {
            "description": "Secrets permission denied to user."
          },
          "404": {
            "description": "Secret does not exist."
          },
          "500": {
            "description": "Invalid vault response"
          },
          "503": {
            "description": "Secret provider unavailable"
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete a given secret belonging to the user.",
        "operationId": "nodeUserSecretDelete",
        "parameters": [
          {
            "type": "string",
            "description": "The organisation name the secret belongs to. Must be the same as the org the user node belongs to.",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The user owning the secret.",
            "name": "user",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The secret key (name).",
            "name": "secret",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "401": {
            "description": "Unauthenticated user."
          },
          "403": {
            "description": "Secrets permission denied to user."
          },
          "404": {
            "description": "Secret does not exist."
          },
          "500": {
            "description": "Invalid vault response"
          },
          "503": {
            "description": "Secret provider unavailable"
          }
        }
      }
    },
    "/org/{org}/secrets/{secret}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "List given secret belonging to the org.",
        "operationId": "orgSecretGet",
        "parameters": [
          {
            "type": "string",
            "description": "The organisation name the secret belongs to.",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The secret key (name).",
            "name": "secret",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/SecretDetails"
            }
          },
          "401": {
            "description": "Unauthenticated user."
          },
          "403": {
            "description": "Secrets permission denied to user."
          },
          "404": {
            "description": "Secret does not exist."
          },
          "500": {
            "description": "Invalid vault response"
          },
          "503": {
            "description": "Secret provider unavailable"
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Add a given secret belonging to the org.",
        "operationId": "orgSecretPut",
        "parameters": [
          {
            "description": "The secret key and value.",
            "name": "secretDetails",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SecretDetails"
            }
          },
          {
            "type": "string",
            "description": "The organisation name the secret belongs to.",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The secret key (name).",
            "name": "secret",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "401": {
            "description": "Unauthenticated user."
          },
          "403": {
            "description": "Secrets permission denied to user."
          },
          "404": {
            "description": "Secret does not exist."
          },
          "500": {
            "description": "Invalid vault response"
          },
          "503": {
            "description": "Secret provider unavailable"
          }
        }
      },
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Delete a given secret belonging to the org.",
        "operationId": "orgSecretDelete",
        "parameters": [
          {
            "type": "string",
            "description": "The organisation name the secret belongs to.",
            "name": "org",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The secret key (name).",
            "name": "secret",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "401": {
            "description": "Unauthenticated user."
          },
          "403": {
            "description": "Secrets permission denied to user."
          },
          "404": {
            "description": "Secret does not exist."
          },
          "500": {
            "description": "Invalid vault response"
          },
          "503": {
            "description": "Secret provider unavailable"
          }
        }
      }
    }
  },
  "definitions": {
    "AbstractPatternFile": {
      "type": "object",
      "properties": {
        "GetClusterNamespace": {
          "type": "string"
        },
        "GetOrg": {
          "type": "string"
        },
        "GetSecretBinding": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecretBinding"
          }
        },
        "GetServices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceReference"
          }
        },
        "GetUserInputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserInput"
          }
        },
        "IsPublic": {
          "type": "boolean"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/common"
    },
    "AbstractServiceFile": {
      "type": "object",
      "properties": {
        "GetArch": {
          "type": "string"
        },
        "GetClusterDeployment": {},
        "GetDeployment": {},
        "GetOrg": {
          "type": "string"
        },
        "GetRequiredServices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceDependency"
          }
        },
        "GetServiceType": {
          "type": "string"
        },
        "GetURL": {
          "type": "string"
        },
        "GetUserInputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserInput"
          }
        },
        "GetVersion": {
          "type": "string"
        },
        "NeedsUserInput": {
          "type": "boolean"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/common"
    },
    "BoundSecret": {
      "type": "object",
      "title": "A binding that maps a secret name to a secret name in the secret manager.",
      "additionalProperties": {
        "type": "string"
      },
      "x-go-package": "github.com/open-horizon/anax/exchangecommon"
    },
    "BusinessPolicy": {
      "description": "BusinessPolicy is the policy for deploying a service to targeted nodes",
      "type": "object",
      "properties": {
        "constraints": {
          "$ref": "#/definitions/ConstraintExpression"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "label": {
          "type": "string",
          "x-go-name": "Label"
        },
        "owner": {
          "type": "string",
          "x-go-name": "Owner"
        },
        "properties": {
          "$ref": "#/definitions/PropertyList"
        },
        "secretBinding": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecretBinding"
          },
          "x-go-name": "SecretBinding"
        },
        "service": {
          "$ref": "#/definitions/ServiceRef"
        },
        "userInput": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserInput"
          },
          "x-go-name": "UserInput"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/businesspolicy"
    },
    "CompCheck": {
      "type": "object",
      "title": "The input format for the compatibility check.",
      "properties": {
        "business_policy": {
          "$ref": "#/definitions/BusinessPolicy"
        },
        "business_policy_id": {
          "type": "string",
          "x-go-name": "BusinessPolId"
        },
        "node_arch": {
          "type": "string",
          "x-go-name": "NodeArch"
        },
        "node_cluster_namespace": {
          "type": "string",
          "x-go-name": "NodeClusterNS"
        },
        "node_id": {
          "type": "string",
          "x-go-name": "NodeId"
        },
        "node_namespace_scoped": {
          "type": "boolean",
          "x-go-name": "NodeNamespaceScoped"
        },
        "node_org": {
          "type": "string",
          "x-go-name": "NodeOrg"
        },
        "node_policy": {
          "$ref": "#/definitions/NodePolicy"
        },
        "node_type": {
          "type": "string",
          "x-go-name": "NodeType"
        },
        "node_user_input": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserInput"
          },
          "x-go-name": "NodeUserInput"
        },
        "pattern": {
          "$ref": "#/definitions/AbstractPatternFile"
        },
        "pattern_id": {
          "type": "string",
          "x-go-name": "PatternId"
        },
        "service": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AbstractServiceFile"
          },
          "x-go-name": "Service"
        },
        "service_policy": {
          "$ref": "#/definitions/ExternalPolicy"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/compcheck"
    },
    "CompCheckOutput": {
      "type": "object",
      "title": "The output format for the compatibility check.",
      "properties": {
        "compatible": {
          "type": "boolean",
          "x-go-name": "Compatible"
        },
        "input": {
          "$ref": "#/definitions/CompCheckResource"
        },
        "reason": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Reason"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/compcheck"
    },
    "CompCheckResource": {
      "description": "The resource that is used for the compatibility check. The resource is a pattern, business policy, service, or other type of resource",
      "type": "object",
      "properties": {
        "business_policy": {
          "$ref": "#/definitions/BusinessPolicy"
        },
        "business_policy_id": {
          "type": "string",
          "x-go-name": "BusinessPolId"
        },
        "dependent_services": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ServiceDefinition"
          },
          "x-go-name": "DepServices"
        },
        "extraneous_secret_binding": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecretBinding"
          },
          "x-go-name": "ExtraneousSB"
        },
        "needed_secret_binding": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecretBinding"
          },
          "x-go-name": "NeededSB"
        },
        "node_arch": {
          "type": "string",
          "x-go-name": "NodeArch"
        },
        "node_cluster_namespace": {
          "type": "string",
          "x-go-name": "NodeClusterNS"
        },
        "node_id": {
          "type": "string",
          "x-go-name": "NodeId"
        },
        "node_namespace_scoped": {
          "type": "boolean",
          "x-go-name": "NodeNamespaceScoped"
        },
        "node_org": {
          "type": "string",
          "x-go-name": "NodeOrg"
        },
        "node_policy": {
          "$ref": "#/definitions/NodePolicy"
        },
        "node_type": {
          "type": "string",
          "x-go-name": "NodeType"
        },
        "node_user_input": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserInput"
          },
          "x-go-name": "NodeUserInput"
        },
        "pattern": {
          "$ref": "#/definitions/AbstractPatternFile"
        },
        "pattern_id": {
          "type": "string",
          "x-go-name": "PatternId"
        },
        "service": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AbstractServiceFile"
          },
          "x-go-name": "Service"
        },
        "service_policy": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ExternalPolicy"
          },
          "x-go-name": "ServicePolicy"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/compcheck"
    },
    "ConstraintExpression": {
      "type": "array",
      "title": "This type implements all the ConstraintLanguage Plug-in methods and delegates to the plug-in system.\"",
      "items": {
        "type": "string"
      },
      "x-go-package": "github.com/open-horizon/anax/externalpolicy"
    },
    "DataVerification": {
      "type": "object",
      "properties": {
        "URL": {
          "type": "string"
        },
        "check_rate": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CheckRate"
        },
        "enabled": {
          "type": "boolean",
          "x-go-name": "Enabled"
        },
        "interval": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Interval"
        },
        "metering": {
          "$ref": "#/definitions/Meter"
        },
        "password": {
          "type": "string",
          "x-go-name": "URLPassword"
        },
        "user": {
          "type": "string",
          "x-go-name": "URLUser"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/exchange"
    },
    "ExternalPolicy": {
      "description": "A policy struct which only has Properties and Constrains",
      "type": "object",
      "properties": {
        "constraints": {
          "$ref": "#/definitions/ConstraintExpression"
        },
        "properties": {
          "$ref": "#/definitions/PropertyList"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/externalpolicy"
    },
    "HardwareRequirement": {
      "type": "object",
      "title": "You can use this type to abstract the various edge node hardware requirements. No enforce validation rules for the data it accepts or returns for this type.",
      "additionalProperties": {},
      "x-go-package": "github.com/open-horizon/anax/exchange"
    },
    "Input": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "value": {
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/policy"
    },
    "Meter": {
      "type": "object",
      "properties": {
        "notification_interval": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NotificationIntervalS"
        },
        "per_time_unit": {
          "type": "string",
          "x-go-name": "PerTimeUnit"
        },
        "tokens": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Tokens"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/exchange"
    },
    "NodeHealth": {
      "type": "object",
      "properties": {
        "check_agreement_status": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CheckAgreementStatus"
        },
        "missing_heartbeat_interval": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MissingHBInterval"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/exchange"
    },
    "NodePolicy": {
      "description": "NodePolicy the node policy\nThe properties and constraints defined in the top-level are common\nproperties and constraints that are used by both Deployment and Management.\nIf the same property name is defined in the second level (Deployment or Management),\nthe perperty value of the second level takes the precedence.\nIf there are constraints defined in the second level, all the constraints defined in\nthe top level will be ignored.",
      "type": "object",
      "properties": {
        "constraints": {
          "$ref": "#/definitions/ConstraintExpression"
        },
        "deployment": {
          "$ref": "#/definitions/ExternalPolicy"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "label": {
          "type": "string",
          "x-go-name": "Label"
        },
        "management": {
          "$ref": "#/definitions/ExternalPolicy"
        },
        "properties": {
          "$ref": "#/definitions/PropertyList"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/exchangecommon"
    },
    "PolicyCheck": {
      "type": "object",
      "title": "The input format for the policy check.",
      "properties": {
        "business_policy": {
          "$ref": "#/definitions/BusinessPolicy"
        },
        "business_policy_id": {
          "type": "string",
          "x-go-name": "BusinessPolId"
        },
        "dependent_services": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ServiceDefinition"
          },
          "x-go-name": "DepServices"
        },
        "node_arch": {
          "type": "string",
          "x-go-name": "NodeArch"
        },
        "node_cluster_namespace": {
          "type": "string",
          "x-go-name": "NodeClusterNS"
        },
        "node_id": {
          "type": "string",
          "x-go-name": "NodeId"
        },
        "node_namespace_scoped": {
          "type": "boolean",
          "x-go-name": "NodeNamespaceScoped"
        },
        "node_policy": {
          "$ref": "#/definitions/NodePolicy"
        },
        "node_type": {
          "type": "string",
          "x-go-name": "NodeType"
        },
        "service": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AbstractServiceFile"
          },
          "x-go-name": "Service"
        },
        "service_policy": {
          "$ref": "#/definitions/ExternalPolicy"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/compcheck"
    },
    "Property": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "value": {
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/externalpolicy"
    },
    "PropertyList": {
      "type": "array",
      "title": "The property values that are advertised by the policy.",
      "items": {
        "$ref": "#/definitions/Property"
      },
      "x-go-package": "github.com/open-horizon/anax/externalpolicy"
    },
    "SecretBinding": {
      "type": "object",
      "title": "The binding that maps a secret name for a service to a secret name in the secret manager.",
      "properties": {
        "enableNodeLevelSecrets": {
          "type": "boolean",
          "x-go-name": "EnableNodeLevelSecrets"
        },
        "secrets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BoundSecret"
          },
          "x-go-name": "Secrets"
        },
        "serviceArch": {
          "type": "string",
          "x-go-name": "ServiceArch"
        },
        "serviceOrgid": {
          "type": "string",
          "x-go-name": "ServiceOrgid"
        },
        "serviceUrl": {
          "type": "string",
          "x-go-name": "ServiceUrl"
        },
        "serviceVersionRange": {
          "type": "string",
          "x-go-name": "ServiceVersionRange"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/exchangecommon"
    },
    "SecretBindingCheck": {
      "type": "object",
      "title": "The input format for the secret binding check.",
      "properties": {
        "business_policy": {
          "$ref": "#/definitions/BusinessPolicy"
        },
        "business_policy_id": {
          "type": "string",
          "x-go-name": "BusinessPolId"
        },
        "dependent_services": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ServiceDefinition"
          },
          "x-go-name": "DepServices"
        },
        "node_arch": {
          "type": "string",
          "x-go-name": "NodeArch"
        },
        "node_id": {
          "type": "string",
          "x-go-name": "NodeId"
        },
        "node_org": {
          "type": "string",
          "x-go-name": "NodeOrg"
        },
        "node_type": {
          "type": "string",
          "x-go-name": "NodeType"
        },
        "pattern": {
          "$ref": "#/definitions/AbstractPatternFile"
        },
        "pattern_id": {
          "type": "string",
          "x-go-name": "PatternId"
        },
        "service": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AbstractServiceFile"
          },
          "x-go-name": "Service"
        },
        "service_to_check": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ServiceToCheck"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/compcheck"
    },
    "SecretDetails": {
      "type": "object",
      "title": "SecretDetails The key value pair of one secret.",
      "required": [
        "key",
        "value"
      ],
      "properties": {
        "key": {
          "description": "The name of the secret",
          "type": "string",
          "x-go-name": "Key"
        },
        "value": {
          "description": "The value of the secret",
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/agreementbot/secrets"
    },
    "ServiceDefinition": {
      "type": "object",
      "title": "This is the structure of the object that is returned by a GET /service request.",
      "properties": {
        "arch": {
          "type": "string",
          "x-go-name": "Arch"
        },
        "clusterDeployment": {
          "type": "string",
          "x-go-name": "ClusterDeployment"
        },
        "clusterDeploymentSignature": {
          "type": "string",
          "x-go-name": "ClusterDeploymentSignature"
        },
        "deployment": {
          "type": "string",
          "x-go-name": "Deployment"
        },
        "deploymentSignature": {
          "type": "string",
          "x-go-name": "DeploymentSignature"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "documentation": {
          "type": "string",
          "x-go-name": "Documentation"
        },
        "label": {
          "type": "string",
          "x-go-name": "Label"
        },
        "lastUpdated": {
          "type": "string",
          "x-go-name": "LastUpdated"
        },
        "matchHardware": {
          "$ref": "#/definitions/HardwareRequirement"
        },
        "owner": {
          "type": "string",
          "x-go-name": "Owner"
        },
        "public": {
          "type": "boolean",
          "x-go-name": "Public"
        },
        "requiredServices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceDependency"
          },
          "x-go-name": "RequiredServices"
        },
        "sharable": {
          "type": "string",
          "x-go-name": "Sharable"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        },
        "userInput": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserInput"
          },
          "x-go-name": "UserInputs"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/exchange"
    },
    "ServiceDependency": {
      "type": "object",
      "title": "This object is used to refer to a specific service that is a dependency for the referencing service.",
      "properties": {
        "arch": {
          "type": "string",
          "x-go-name": "Arch"
        },
        "org": {
          "type": "string",
          "x-go-name": "Org"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        },
        "versionRange": {
          "type": "string",
          "x-go-name": "VersionRange"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/exchangecommon"
    },
    "ServiceRef": {
      "type": "object",
      "properties": {
        "arch": {
          "type": "string",
          "x-go-name": "Arch"
        },
        "clusterNamespace": {
          "type": "string",
          "x-go-name": "ClusterNamespace"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "nodeHealth": {
          "$ref": "#/definitions/NodeHealth"
        },
        "org": {
          "type": "string",
          "x-go-name": "Org"
        },
        "serviceVersions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkloadChoice"
          },
          "x-go-name": "ServiceVersions"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/businesspolicy"
    },
    "ServiceReference": {
      "type": "object",
      "properties": {
        "agreementLess": {
          "type": "boolean",
          "x-go-name": "AgreementLess"
        },
        "dataVerification": {
          "$ref": "#/definitions/DataVerification"
        },
        "nodeHealth": {
          "$ref": "#/definitions/NodeHealth"
        },
        "serviceArch": {
          "type": "string",
          "x-go-name": "ServiceArch"
        },
        "serviceOrgid": {
          "type": "string",
          "x-go-name": "ServiceOrg"
        },
        "serviceUrl": {
          "type": "string",
          "x-go-name": "ServiceURL"
        },
        "serviceVersions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkloadChoice"
          },
          "x-go-name": "ServiceVersions"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/exchange"
    },
    "UpgradePolicy": {
      "type": "object",
      "properties": {
        "lifecycle": {
          "type": "string",
          "x-go-name": "Lifecycle"
        },
        "time": {
          "type": "string",
          "x-go-name": "Time"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/exchange"
    },
    "UserInput": {
      "type": "object",
      "title": "This object describes a configuration variable that the node owner or user must set before the service can execute on the edge node.",
      "properties": {
        "defaultValue": {
          "type": "string",
          "x-go-name": "DefaultValue"
        },
        "label": {
          "type": "string",
          "x-go-name": "Label"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/exchangecommon"
    },
    "UserInputCheck": {
      "type": "object",
      "title": "The input format for the userinput check.",
      "properties": {
        "business_policy": {
          "$ref": "#/definitions/BusinessPolicy"
        },
        "business_policy_id": {
          "type": "string",
          "x-go-name": "BusinessPolId"
        },
        "dependent_services": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ServiceDefinition"
          },
          "x-go-name": "DepServices"
        },
        "node_arch": {
          "type": "string",
          "x-go-name": "NodeArch"
        },
        "node_cluster_namespace": {
          "type": "string",
          "x-go-name": "NodeClusterNS"
        },
        "node_id": {
          "type": "string",
          "x-go-name": "NodeId"
        },
        "node_namespace_scoped": {
          "type": "boolean",
          "x-go-name": "NodeNamespaceScoped"
        },
        "node_type": {
          "type": "string",
          "x-go-name": "NodeType"
        },
        "node_user_input": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserInput"
          },
          "x-go-name": "NodeUserInput"
        },
        "pattern": {
          "$ref": "#/definitions/AbstractPatternFile"
        },
        "pattern_id": {
          "type": "string",
          "x-go-name": "PatternId"
        },
        "service": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AbstractServiceFile"
          },
          "x-go-name": "Service"
        },
        "service_to_check": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ServiceToCheck"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/compcheck"
    },
    "WorkloadChoice": {
      "type": "object",
      "properties": {
        "priority": {
          "$ref": "#/definitions/WorkloadPriority"
        },
        "upgradePolicy": {
          "$ref": "#/definitions/UpgradePolicy"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/businesspolicy"
    },
    "WorkloadPriority": {
      "type": "object",
      "properties": {
        "priority_value": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PriorityValue"
        },
        "retries": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Retries"
        },
        "retry_durations": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RetryDurationS"
        },
        "verified_durations": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "VerifiedDurationS"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/businesspolicy"
    }
  }
}